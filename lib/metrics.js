// Generated by CoffeeScript 1.10.0
(function() {
  var sixDaysBefore;

  App.Metrics = (function() {
    function Metrics() {}

    Metrics.repoEffectivenessIcon = function(repo) {
      var rating;
      rating = this.repoEffectiveness(repo);
      if (rating >= 0 && rating < 3) {
        return "fa-frown-o";
      }
      if (rating >= 3 && rating < 4.5) {
        return "fa-meh-o";
      }
      if (rating >= 4.5 && rating < 7) {
        return "fa-smile-o";
      }
      if (rating >= 7 && rating <= 10) {
        return "fa-smile-o green-glow";
      }
      throw new RangeError("Rating was " + rating + ", but must be between 0 and 10");
    };

    Metrics.repoEffectivenessDesc = function(repo) {
      return this.effectivenessDesc(this.repoEffectiveness(repo));
    };

    Metrics.repoEffectiveness = function(repo) {
      return this.effectiveness(repo.closedPullRequestCount(), repo.openPullRequestCount(), repo.closedIssueCount(), repo.openIssueCount());
    };

    Metrics.effectivenessForIssues = function(weekOfIssues) {
      var repo;
      repo = new App.Repo('none/none', null, null, null, false);
      repo.rawdata.issues = weekOfIssues;
      return this.repoEffectiveness(repo);
    };

    Metrics.effectiveness = function(merged_prs, proposed_prs, closed_issues, new_issues) {
      var inputs, issues, prs;
      inputs = [merged_prs, proposed_prs, closed_issues, new_issues].join(", ");
      prs = this.pr_effectiveness(merged_prs, proposed_prs);
      issues = this.issue_effectiveness(closed_issues, new_issues);
      return (0.66 * prs) + (0.34 * issues);
    };

    Metrics.prEffectiveness = function(repo) {
      return this.pr_effectiveness(repo.closedPullRequestCount(), repo.openPullRequestCount());
    };

    Metrics.issueEffectiveness = function(repo) {
      return this.issue_effectiveness(repo.closedIssueCount(), repo.openIssueCount());
    };

    Metrics.pr_effectiveness = function(merged_prs, proposed_prs) {
      return this.scaled(this.ratio(merged_prs, proposed_prs));
    };

    Metrics.issue_effectiveness = function(closed_issues, new_issues) {
      return this.scaled(this.ratio(closed_issues, new_issues));
    };

    Metrics.effectivenessDesc = function(rating) {
      if (rating >= 0 && rating < 4) {
        return "In the weeds";
      }
      if (rating >= 4 && rating < 7) {
        return "Doing fine";
      }
      if (rating >= 7 && rating <= 10) {
        return "Super effective!";
      }
      throw new RangeError("Rating was " + rating + ", but must be between 0 and 10");
    };

    Metrics.ratio = function(x, y) {
      if (x === 0 && y === 0) {
        return 1;
      } else {
        return x / y;
      }
    };

    Metrics.scaled = function(ratio) {
      if (ratio === Infinity) {
        return 10;
      }
      return 10 * (ratio / (1 + ratio));
    };

    Metrics.groupByWeek = function(anArray, attribute) {
      var items, previousDays, ref, thisWeek, weekEndingDate, weekStartingDate;
      if (attribute == null) {
        throw new RangeError("required param \"attribute\" not supplied");
      }
      if (_.isEmpty(anArray)) {
        return [];
      }
      items = _.sortBy(anArray, attribute);
      weekEndingDate = _.last(items)[attribute];
      weekStartingDate = sixDaysBefore(weekEndingDate);
      ref = _.partition(items, function(i) {
        return i[attribute] >= weekStartingDate;
      }), thisWeek = ref[0], previousDays = ref[1];
      return this.groupByWeek(previousDays, attribute).concat([thisWeek]);
    };

    Metrics.randomIntFromInterval = function(min, max) {
      return Math.floor(Math.random() * (max - min + 1) + min);
    };

    return Metrics;

  })();

  sixDaysBefore = function(aDate) {
    return new Date(aDate.getFullYear(), aDate.getMonth(), aDate.getDate() - 6);
  };

}).call(this);
