// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App.Repo = (function() {
    var _chartDataPoint, _dateFormat, _earliestDate, _effectiveness;

    function Repo(repoSpec, repoCallback, issuesCallback, errorCallback, network) {
      var repoInfo;
      this.repoCallback = repoCallback;
      this.issuesCallback = issuesCallback;
      this.errorCallback = errorCallback;
      if (network == null) {
        network = true;
      }
      this.equals = bind(this.equals, this);
      this.trendData = bind(this.trendData, this);
      this.issueEffectiveness = bind(this.issueEffectiveness, this);
      this.prEffectiveness = bind(this.prEffectiveness, this);
      this.effectiveness = bind(this.effectiveness, this);
      this.issues = bind(this.issues, this);
      this.pullRequests = bind(this.pullRequests, this);
      this.closedIssueCount = bind(this.closedIssueCount, this);
      this.openIssueCount = bind(this.openIssueCount, this);
      this.closedPullRequestCount = bind(this.closedPullRequestCount, this);
      this.openPullRequestCount = bind(this.openPullRequestCount, this);
      this.fetchIssues = bind(this.fetchIssues, this);
      this.fetchData = bind(this.fetchData, this);
      this.url = bind(this.url, this);
      repoInfo = App.Github.parseRepoInput(repoSpec);
      if (repoInfo == null) {
        this.errorCallback("Couldn't parse " + repoSpec);
        return;
      }
      this.acct = repoInfo[0], this.name = repoInfo[1];
      this.rawdata = {};
      if (network) {
        this.fetchData();
      }
    }

    Repo.prototype.url = function() {
      return "https://github.com/" + this.acct + "/" + this.name;
    };

    Repo.prototype.fetchData = function() {
      return App.octo.repos(this.acct, this.name).fetch((function(_this) {
        return function(err, repodata) {
          if (err) {
            return _this.errorCallback(err.message);
          } else {
            _this.rawdata.repo = repodata;
            _this.repoCallback(_this);
            return _this.fetchIssues(_this.rawdata.repo);
          }
        };
      })(this));
    };

    Repo.prototype.fetchIssues = function(repo) {
      var options;
      options = {
        per_page: 100,
        state: 'all',
        since: App.Github.oneMonthAgo()
      };
      return App.octoFetchAll(repo.issues.fetch, options).then(((function(_this) {
        return function(issues) {
          _this.rawdata.issues = issues;
          return _this.issuesCallback(_this);
        };
      })(this)))["catch"](this.errorCallback);
    };

    Repo.prototype.openPullRequestCount = function() {
      return this.pullRequests().filter(function(pr) {
        return pr.state === 'open';
      }).length;
    };

    Repo.prototype.closedPullRequestCount = function() {
      return this.pullRequests().filter(function(pr) {
        return pr.state === 'closed';
      }).length;
    };

    Repo.prototype.openIssueCount = function() {
      return this.issues().filter(function(i) {
        return i.state === 'open';
      }).length;
    };

    Repo.prototype.closedIssueCount = function() {
      return this.issues().filter(function(i) {
        return i.state === 'closed';
      }).length;
    };

    Repo.prototype.pullRequests = function() {
      return this.rawdata.issues.filter(function(x) {
        return typeof x.pullRequest === 'object';
      });
    };

    Repo.prototype.issues = function() {
      return this.rawdata.issues.filter(function(x) {
        return typeof x.pullRequest === 'undefined';
      });
    };

    Repo.prototype.effectiveness = function() {
      return App.Metrics.repoEffectiveness(this);
    };

    Repo.prototype.prEffectiveness = function() {
      return App.Metrics.prEffectiveness(this);
    };

    Repo.prototype.issueEffectiveness = function() {
      return App.Metrics.issueEffectiveness(this);
    };

    Repo.prototype.trendData = function() {
      return App.Metrics.groupByWeek(this.rawdata.issues, 'updatedAt').map(function(weekOfIssues) {
        return _chartDataPoint(weekOfIssues);
      });
    };

    Repo.prototype.equals = function(other) {
      return (other.name === this.name) && (other.acct === this.acct);
    };

    _chartDataPoint = function(issues) {
      return [_earliestDate(issues), _effectiveness(issues)];
    };

    _earliestDate = function(issues) {
      return _dateFormat(_.first(issues).updatedAt);
    };

    _effectiveness = function(issues) {
      return Number(sprintf('%.1f', App.Metrics.effectivenessForIssues(issues)));
    };

    _dateFormat = function(aDate) {
      var day, month;
      month = aDate.getMonth() + 1;
      day = aDate.getDate();
      return [month, day].join('/');
    };

    return Repo;

  })();

}).call(this);
